name: Deploy to Local Docker

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: self-hosted
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up environment
      run: |
        echo "DEPLOYMENT_TIME=$(date '+%Y-%m-%d %H:%M:%S')" >> $GITHUB_ENV
        echo "COMMIT_SHA=$(git rev-parse --short HEAD)" >> $GITHUB_ENV
        echo "JOB_URL=https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}" >> $GITHUB_ENV
        
    - name: Create deployment env file
      run: |
        cat > .env.production << EOF
        NODE_ENV=production
        DATABASE_PROVIDER=postgresql
        DATABASE_URL=${{ secrets.DATABASE_URL }}
        DISCORD_WEBHOOK_URL=${{ secrets.DISCORD_WEBHOOK_URL }}
        API_KEY=${{ secrets.API_KEY }}
        NOTIFICATION_DELAY=1000
        API_PORT=3000
        SAVE_DEBUG_HTML="true"
        SKIP_DB_OPTIMIZATION="true"
        EOF
        echo "=== Created .env.production file ==="
        cat .env.production
        echo "=================================="
        
    - name: Build new images
      run: |
        echo "üî® Building new images..."
        docker-compose -f docker-compose.production.yml build
        
    - name: Deploy with minimal downtime
      run: |
        echo "üöÄ Starting deployment with health check..."
        
        # Check if production containers are currently running
        OLD_API_RUNNING=$(docker ps --filter "name=crawler-api-prod" --format "{{.Names}}" || echo "")
        
        if [ -n "$OLD_API_RUNNING" ]; then
          echo "üìä Current API status:"
          curl -sf http://localhost:3001/health || echo "API not responding"
        fi
        
        # Clean up existing production containers first
        echo "üßπ Cleaning up existing production containers..."
        docker stop crawler-api-prod crawler-postgres-prod 2>/dev/null || true
        docker rm crawler-api-prod crawler-postgres-prod 2>/dev/null || true
        
        # Deploy new containers
        echo "üîÑ Deploying new containers..."
        docker-compose -f docker-compose.production.yml up -d
        
        echo "‚è≥ Waiting for new containers to be ready..."
        
        # Wait for database to be ready first
        timeout 120 bash -c 'until docker exec crawler-postgres-prod pg_isready -U postgres > /dev/null 2>&1; do 
          echo "Waiting for database..."
          sleep 3
        done'
        
        # Wait for API to be healthy  
        timeout 90 bash -c 'until curl -sf http://localhost:3001/health > /dev/null 2>&1; do 
          echo "Waiting for API health check..."
          sleep 3
        done'
        
        # Final verification
        echo "‚úÖ Deployment completed! Verifying..."
        curl -s http://localhost:3001/health | grep -q "healthy" && echo "üéâ API is healthy!" || echo "‚ö†Ô∏è  API health check failed"
        
        echo "üìä Container status:"
        docker ps --filter "name=crawler-" --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"
        
    - name: Cleanup old images
      run: |
        docker image prune -f || true
        
    - name: Send deployment notification
      if: always()
      run: |
        if [ "${{ job.status }}" == "success" ]; then
          curl -X POST "${{ secrets.MAINTENANCE_WEBHOOK_URL }}" \
            -H "Content-Type: application/json" \
            -d "{
              \"embeds\": [{
                \"title\": \"üöÄ Local Deployment Successful\",
                \"description\": \"591 Crawler deployed successfully to local Docker\",
                \"color\": 3066993,
                \"fields\": [
                  {\"name\": \"Commit\", \"value\": \"$COMMIT_SHA\", \"inline\": true},
                  {\"name\": \"Time\", \"value\": \"$DEPLOYMENT_TIME\", \"inline\": true},
                  {\"name\": \"Environment\", \"value\": \"Local Docker (Port 3001)\", \"inline\": true},
                  {\"name\": \"URL\", \"value\": \"http://localhost:3001\", \"inline\": true}
                ]
              }]
            }" || true
        else
          curl -X POST "${{ secrets.MAINTENANCE_WEBHOOK_URL }}" \
            -H "Content-Type: application/json" \
            -d "{
              \"embeds\": [{
                \"title\": \"‚ùå Local Deployment Failed\",
                \"description\": \"591 Crawler deployment to local Docker failed\",
                \"color\": 15158332,
                \"fields\": [
                  {\"name\": \"Commit\", \"value\": \"$COMMIT_SHA\", \"inline\": true},
                  {\"name\": \"Time\", \"value\": \"$DEPLOYMENT_TIME\", \"inline\": true},
                  {\"name\": \"CI Job\", \"value\": \"[View Logs]($JOB_URL)\", \"inline\": true},
                  {\"name\": \"Action\", \"value\": \"Check the CI logs for detailed error information\", \"inline\": false}
                ]
              }]
            }" || true
        fi