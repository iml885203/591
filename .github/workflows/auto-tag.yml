name: Auto Tag and Release

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  auto-tag:
    runs-on: ubuntu-latest
    # Skip if commit message contains version bump
    if: "!contains(github.event.head_commit.message, 'chore: bump version')"
    permissions:
      contents: write
      pull-requests: read
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0
    
    - name: Generate version and create tag
      run: |
        # Configure git identity for tag creation
        git config user.name "GitHub Actions"
        git config user.email "actions@github.com"
        
        # Ensure we have all tags from remote
        git fetch --tags --force
        
        # Generate CalVer version (YYYY.MM.PATCH)
        YEAR=$(date +%Y)
        MONTH=$(date +%-m)
        
        # Get all existing tags for current month to determine patch version
        # Use proper version sorting and ensure we get the highest patch number
        MONTH_TAGS=$(git tag -l "v${YEAR}.${MONTH}.*" | grep -E "^v${YEAR}\.${MONTH}\.[0-9]+$" | sort -t'.' -k3 -n)
        
        echo "Found existing tags for ${YEAR}.${MONTH}: $MONTH_TAGS"
        if [ -z "$MONTH_TAGS" ]; then
          PATCH=1
        else
          # Extract patch number from tag like "v2025.7.25" -> "25"
          LATEST_PATCH=$(echo "$MONTH_TAGS" | tail -1 | sed 's/^v//' | cut -d'.' -f3)
          PATCH=$((LATEST_PATCH + 1))
        fi
        
        NEW_VERSION="${YEAR}.${MONTH}.${PATCH}"
        echo "Generated version: v$NEW_VERSION"
        
        # Check if tag already exists
        if git rev-parse "v$NEW_VERSION" >/dev/null 2>&1; then
          echo "Tag v$NEW_VERSION already exists, skipping"
          exit 0
        fi
        
        # Create annotated tag with version info
        COMMIT_INFO=$(git log -1 --pretty=format:'%h - %s')
        
        # Create simple tag message
        git tag -a "v$NEW_VERSION" -m "Release v$NEW_VERSION - Auto-generated tag for commit: $COMMIT_INFO"
        
        # Push tag
        git push origin "v$NEW_VERSION"
        
        echo "âœ… Created and pushed tag v$NEW_VERSION"
        echo "VERSION=$NEW_VERSION" >> $GITHUB_ENV
    
    - name: Create GitHub Release
      if: env.VERSION
      env:
        GH_TOKEN: ${{ github.token }}
      run: |
        # Prepare release notes
        COMMIT_INFO=$(git log -1 --pretty=format:'%h - %s')
        RECENT_CHANGES=$(git log --oneline --since='1 day ago' | head -5)
        
        # Create simple release notes
        NOTES="Auto-generated release for v$VERSION. Latest commit: $COMMIT_INFO. Docker deployment available at http://localhost:3001"
        
        # Create release from tag
        gh release create "v$VERSION" \
          --title "Release v$VERSION" \
          --notes "$NOTES" \
          --latest